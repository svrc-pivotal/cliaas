// Code generated by counterfeiter. DO NOT EDIT.
package azurefakes

import (
	"sync"

	"github.com/Azure/azure-sdk-for-go/arm/compute"
	"github.com/Azure/go-autorest/autorest"
	"github.com/pivotal-cf/cliaas/iaas/azure"
)

type FakeComputeImagesClient struct {
	CreateOrUpdateStub        func(resourceGroupName string, imageName string, parameters compute.Image, cancel <-chan struct{}) (result autorest.Response, err error)
	createOrUpdateMutex       sync.RWMutex
	createOrUpdateArgsForCall []struct {
		resourceGroupName string
		imageName         string
		parameters        compute.Image
		cancel            <-chan struct{}
	}
	createOrUpdateReturns struct {
		result1 autorest.Response
		result2 error
	}
	createOrUpdateReturnsOnCall map[int]struct {
		result1 autorest.Response
		result2 error
	}
	GetStub        func(resourceGroupName string, imageName string, expand string) (result compute.Image, err error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		resourceGroupName string
		imageName         string
		expand            string
	}
	getReturns struct {
		result1 compute.Image
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 compute.Image
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeComputeImagesClient) CreateOrUpdate(resourceGroupName string, imageName string, parameters compute.Image, cancel <-chan struct{}) (result autorest.Response, err error) {
	fake.createOrUpdateMutex.Lock()
	ret, specificReturn := fake.createOrUpdateReturnsOnCall[len(fake.createOrUpdateArgsForCall)]
	fake.createOrUpdateArgsForCall = append(fake.createOrUpdateArgsForCall, struct {
		resourceGroupName string
		imageName         string
		parameters        compute.Image
		cancel            <-chan struct{}
	}{resourceGroupName, imageName, parameters, cancel})
	fake.recordInvocation("CreateOrUpdate", []interface{}{resourceGroupName, imageName, parameters, cancel})
	fake.createOrUpdateMutex.Unlock()
	if fake.CreateOrUpdateStub != nil {
		return fake.CreateOrUpdateStub(resourceGroupName, imageName, parameters, cancel)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createOrUpdateReturns.result1, fake.createOrUpdateReturns.result2
}

func (fake *FakeComputeImagesClient) CreateOrUpdateCallCount() int {
	fake.createOrUpdateMutex.RLock()
	defer fake.createOrUpdateMutex.RUnlock()
	return len(fake.createOrUpdateArgsForCall)
}

func (fake *FakeComputeImagesClient) CreateOrUpdateArgsForCall(i int) (string, string, compute.Image, <-chan struct{}) {
	fake.createOrUpdateMutex.RLock()
	defer fake.createOrUpdateMutex.RUnlock()
	return fake.createOrUpdateArgsForCall[i].resourceGroupName, fake.createOrUpdateArgsForCall[i].imageName, fake.createOrUpdateArgsForCall[i].parameters, fake.createOrUpdateArgsForCall[i].cancel
}

func (fake *FakeComputeImagesClient) CreateOrUpdateReturns(result1 autorest.Response, result2 error) {
	fake.CreateOrUpdateStub = nil
	fake.createOrUpdateReturns = struct {
		result1 autorest.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeImagesClient) CreateOrUpdateReturnsOnCall(i int, result1 autorest.Response, result2 error) {
	fake.CreateOrUpdateStub = nil
	if fake.createOrUpdateReturnsOnCall == nil {
		fake.createOrUpdateReturnsOnCall = make(map[int]struct {
			result1 autorest.Response
			result2 error
		})
	}
	fake.createOrUpdateReturnsOnCall[i] = struct {
		result1 autorest.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeImagesClient) Get(resourceGroupName string, imageName string, expand string) (result compute.Image, err error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		resourceGroupName string
		imageName         string
		expand            string
	}{resourceGroupName, imageName, expand})
	fake.recordInvocation("Get", []interface{}{resourceGroupName, imageName, expand})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(resourceGroupName, imageName, expand)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeComputeImagesClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeComputeImagesClient) GetArgsForCall(i int) (string, string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].resourceGroupName, fake.getArgsForCall[i].imageName, fake.getArgsForCall[i].expand
}

func (fake *FakeComputeImagesClient) GetReturns(result1 compute.Image, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 compute.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeImagesClient) GetReturnsOnCall(i int, result1 compute.Image, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 compute.Image
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 compute.Image
		result2 error
	}{result1, result2}
}

func (fake *FakeComputeImagesClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrUpdateMutex.RLock()
	defer fake.createOrUpdateMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeComputeImagesClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azure.ComputeImagesClient = new(FakeComputeImagesClient)
